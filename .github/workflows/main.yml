name: Main

on:
  push:
    paths-ignore:
      - 'docs/**'
    branches:
      - main
  pull_request:
    paths-ignore:
      - 'docs/**'
    branches:
      - '**'
  release:
    types: [published]

concurrency:
  group: tests-${{ github.head_ref || github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  tests:
    name: ${{ matrix.os }} / ${{ matrix.python-version }} ${{ matrix.suffix }}
    runs-on: ${{ matrix.image }}
    strategy:
      matrix:
        os: [Ubuntu, macOS, Windows]
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
        include:
          - os: Ubuntu
            image: ubuntu-latest
          - os: Windows
            image: windows-2022
          - os: macOS
            image: macos-11
      fail-fast: false
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get full Python version
        id: full-python-version
        run: echo version=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))") >> $GITHUB_OUTPUT

      - name: Bootstrap poetry
        run: |
          curl -sL https://install.python-poetry.org | python - -y ${{ matrix.bootstrap-args }}

      - name: Update PATH
        if: ${{ matrix.os != 'Windows' }}
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Update Path for Windows
        if: ${{ matrix.os == 'Windows' }}
        run: echo "$APPDATA\Python\Scripts" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v3
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        run: poetry install

      - name: Run pytest
        run: poetry run coverage run -m pytest -p no:sugar

  # Temporarily disabled because of bug on windows tests
  #     - name: Coveralls Parallel
  #       uses: coverallsapp/github-action@v2
  #       with:
  #         flag-name: run-${{ join(matrix.*, '-') }}
  #         parallel: true

  # coveralls:
  #   name: Indicate completion to coveralls.io
  #   needs: tests
  #   runs-on: ubuntu-latest
  #   container: python:3-slim
  #   steps:
  #   - name: Finished
  #     uses: coverallsapp/github-action@v2
  #     with:
  #       parallel-finished: true
  #       carryforward: "run-1,run-2"

  publish:
    name: Build package and publish to PyPI
    needs: tests
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Setup poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: "1.4.2"

      - name: Authenticate poetry
        run: poetry config pypi-token.pypi ${{ secrets.PYPI_API_TOKEN }}

      - name: Build package
        run: poetry build

      - name: Check that tag matches version
        if: startsWith(github.ref, 'refs/tags/')
        uses: andstor/file-existence-action@v1
        with:
          files: "dist/blueskyapi-${{ github.ref_name }}.tar.gz, dist/blueskyapi-${{ github.ref_name }}-py3-none-any.whl"
          allow_failure: true

      - name: Publish package
        if: startsWith(github.ref, 'refs/tags/')
        run: poetry publish
